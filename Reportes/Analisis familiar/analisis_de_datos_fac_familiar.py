# -*- coding: utf-8 -*-
"""Análisis de Datos FAC familiar

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pBDJJeWRsua4-iPxqszbNrs_tH_lNb0Q
"""

# analisis_familiar.py
import pandas as pd #Pandas sirve para leer, limpiar y analizar datos en tablas (DataFrames)
import matplotlib.pyplot as plt # Se usa para hacer gráficas
# Leer los datos
df = pd.read_excel("/content/JEFAB_2024_corregido.xlsx")

print(df.columns.tolist()) # para ver las columnas
# Unificar categorías
df["ESTADO_CIVIL"] = df["ESTADO_CIVIL"].replace({
    "divorciado": "divorciado/separado",
    "separado": "divorciado/separado"
})

# Verificar cambios
print(df["ESTADO_CIVIL"].value_counts())

"""Analisis estado civil"""

# Análisis de estado civil
print("=== ANÁLISIS ESTADO CIVIL ===")
print(df['ESTADO_CIVIL'].value_counts()) # cuenta cuántas veces aparece cada categoría en esa columna.

# Gráfico de estado civil
plt.figure(figsize=(10, 6)) # define el tamaño en pulgadas (ancho=10, alto=6).
df['ESTADO_CIVIL'].value_counts().plot(kind='bar') # selecciona la columna de estado civil,cuenta cuántas veces aparece cada categoría.
plt.title('Distribución del Estado Civil')
plt.xlabel('Estado Civil')
plt.ylabel('Cantidad')
plt.xticks(rotation=45) # Rota las etiquetas del eje X 45 grados.
plt.tight_layout() # Ajusta automáticamente márgenes y espaciado.
plt.show() # Muestra el grafico

# Porcentaje para estado civil
porcentajes = df['ESTADO_CIVIL'].value_counts(normalize=True) * 100
print(porcentajes)

"""Anaisis de Hijos

"""

# Análisis de hijos
print("\n=== ANÁLISIS DE HIJOS ===")
print(f"Personal con hijos: {df['HIJOS'].value_counts()}")

"""Analisis de convivencia familiar"""

# Análisis de convivencia familiar
print("\n=== ANÁLISIS DE CONVIVENCIA ===")
print(f"Habita con familia: {df['HABITA_VIVIENDA_FAMILIAR'].value_counts()}")

# Cruce entre tener hijos y habitar con familia
print("\n=== CRUCE HIJOS Y CONVIVENCIA ===")
cruce = pd.crosstab(df['HIJOS'], df['HABITA_VIVIENDA_FAMILIAR'])
print(cruce)

# ================================
# HIJOS vs CONVIVENCIA FAMILIAR
# ================================
print("\n=== HIJOS vs CONVIVENCIA FAMILIAR ===")
tabla = pd.crosstab(df['HIJOS'], df['HABITA_VIVIENDA_FAMILIAR'])
print(tabla)

# Chi-cuadrado
chi2, p, dof, expected = chi2_contingency(tabla)
print("\nChi-cuadrado Hijos vs Convivencia: chi2 =", round(chi2,2), "p =", round(p,4))
if p < 0.05:
    print(" Existe asociación significativa entre Hijos y Convivencia Familiar")
else:
    print("No se encontró asociación significativa")

"""Analisis de Vivienda propia"""

import matplotlib.pyplot as plt
import pandas as pd

# Tabla de contingencia
tabla_hijos_vivienda = pd.crosstab(df['HIJOS'], df['VIVIENDA_PROPIA'])

print("=== TABLA HIJOS vs VIVIENDA PROPIA ===")
print(tabla_hijos_vivienda)

# Normalizada por fila (porcentaje)
tabla_hijos_vivienda_pct = pd.crosstab(df['HIJOS'], df['VIVIENDA_PROPIA'], normalize='index') * 100
print("\n=== TABLA PORCENTUAL HIJOS vs VIVIENDA PROPIA ===")
print(tabla_hijos_vivienda_pct.round(2))

# ================================
# HIJOS vs VIVIENDA PROPIA
# ================================
print("\n=== HIJOS vs VIVIENDA PROPIA ===")
tabla = pd.crosstab(df['HIJOS'], df['VIVIENDA_PROPIA'])
print(tabla)

# Chi-cuadrado
chi2, p, dof, expected = chi2_contingency(tabla)
print("\nChi-cuadrado Hijos vs Vivienda Propia: chi2 =", round(chi2,2), "p =", round(p,4))
if p < 0.05:
    print("👉 Existe asociación significativa entre Hijos y Vivienda Propia")
else:
    print("👉 No se encontró asociación significativa")

tabla_hijos_vivienda = pd.crosstab(df['HIJOS'], df['VIVIENDA_PROPIA'], normalize='index') * 100

tabla_hijos_vivienda.plot(kind='bar', figsize=(8,6))

plt.title("Relación entre Hijos y Vivienda Propia")
plt.ylabel("Porcentaje (%)")
plt.xlabel("Tiene Hijos")
plt.xticks(rotation=0)
plt.legend(title="Vivienda Propia", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""Analisis de categoria"""

# Cruce de Estado Civil y Categoría
print("\n=== CRUCE ESTADO CIVIL vs CATEGORIA ===")

tabla_cat = pd.crosstab(df['ESTADO_CIVIL'], df['CATEGORIA'])
print("\nFrecuencias absolutas:")
print(tabla_cat)

tabla_cat_pct = pd.crosstab(df['ESTADO_CIVIL'], df['CATEGORIA'], normalize='index') * 100
print("\nPorcentajes (% por fila):")
print(tabla_cat_pct.round(2))

tabla_estado_categoria = pd.crosstab(df['ESTADO_CIVIL'], df['CATEGORIA'], normalize='index') * 100

tabla_estado_categoria.plot(kind='bar', figsize=(10,6))

plt.title("Distribución de Categoría por Estado Civil")
plt.ylabel("Porcentaje (%)")
plt.xlabel("Estado Civil")
plt.xticks(rotation=45)
plt.legend(title="Categoría", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

import pandas as pd
from scipy.stats import chi2_contingency, fisher_exact, f_oneway, kruskal


# ================================
# ESTADO CIVIL vs CATEGORIA
# ================================
print("\n=== ESTADO CIVIL vs CATEGORIA ===")
tabla = pd.crosstab(df['ESTADO_CIVIL'], df['CATEGORIA'])
print(tabla)

# Chi-cuadrado
chi2, p, dof, expected = chi2_contingency(tabla)
print("\nChi-cuadrado Estado Civil vs Categoría: chi2 =", round(chi2,2), "p =", round(p,4))
if p < 0.05:
    print(" Existe asociación significativa entre Estado Civil y Categoría")
else:
    print(" No se encontró asociación significativa")

"""Relacion entre estado civil y edad"""

print(df.groupby("ESTADO_CIVIL")["EDAD2"].mean())

# ================================
# ESTADO CIVIL vs EDAD
# ================================
print("\n=== ESTADO CIVIL vs EDAD ===")
print(df.groupby("ESTADO_CIVIL")["EDAD2"].mean())

from scipy.stats import shapiro

print("\n=== PRUEBA DE NORMALIDAD (Shapiro-Wilk) ===")

for estado, grupo in df.groupby("ESTADO_CIVIL"):
    datos = grupo["EDAD2"].dropna()
    stat, p = shapiro(datos)
    print(f"{estado}: p = {round(p,4)}")
    if p < 0.05:
        print(" No hay normalidad")
    else:
        print("Normalidad aceptada")


# Agrupar por estado civil
grupos = [grupo["EDAD2"].dropna().values for _, grupo in df.groupby("ESTADO_CIVIL")]



# Kruskal-Wallis
kruskal_test = kruskal(*grupos)
print("Kruskal-Wallis H =", round(kruskal_test.statistic,2), "p =", round(kruskal_test.pvalue,4))

#!pip install scikit-posthocs
# Prueba de Dunn
import scikit_posthocs as sp

posthoc = sp.posthoc_dunn(df, val_col="EDAD2", group_col="ESTADO_CIVIL", p_adjust="bonferroni")
print(posthoc)

df.groupby("ESTADO_CIVIL")["EDAD2"].mean().plot(kind="bar")
plt.show()

plt.figure(figsize=(10,6))
df.boxplot(column="EDAD2", by="ESTADO_CIVIL", grid=False)
plt.title("Distribución de la edad según Estado Civil")
plt.suptitle("")  # elimina título extra de pandas
plt.xlabel("Estado Civil")
plt.ylabel("Edad")
plt.xticks(rotation=45)
plt.show()

#Hace un boxplot de la columna EDAD2 (edad).

#Separa los datos por cada categoría de ESTADO_CIVIL.

# grid=False quita las líneas de la cuadrícula de fondo.

"""Analisis de maltrato intrafamiliar"""

# Tabla de contingencia
cruce = pd.crosstab(df['HABITA_VIVIENDA_FAMILIAR'], df['MALTRATO_INTRAFAMILIAR'], margins=True)
print("\n=== Cruce HABITA_VIVIENDA_FAMILIAR vs MALTRATO_INTRAFAMILIAR ===")
print(cruce)

import matplotlib.pyplot as plt

# Gráfico de barras agrupadas
cruce_graf = pd.crosstab(df['HABITA_VIVIENDA_FAMILIAR'], df['MALTRATO_INTRAFAMILIAR'])
cruce_graf.plot(kind="bar", figsize=(8,5))

plt.title("Relación entre Habitar Vivienda Familiar y Maltrato Intrafamiliar")
plt.xlabel("Habita Vivienda Familiar")
plt.ylabel("Número de Personas")
plt.xticks(rotation=0)
plt.legend(title="Maltrato Intrafamiliar")
plt.show()

"""Analisis de relacion estable"""

# Tabla de contingencia
cruce_hijos_pareja = pd.crosstab(df['HIJOS'], df['RELACION_PAREJA_ESTABLE'], margins=True)
print("\n=== Cruce HIJOS vs RELACION_PAREJA_ESTABLE ===")
print(cruce_hijos_pareja)

# ================================
# HIJOS vs RELACION PAREJA ESTABLE
# ================================
print("\n=== HIJOS vs RELACION PAREJA ESTABLE ===")
tabla = pd.crosstab(df['HIJOS'], df['RELACION_PAREJA_ESTABLE'])
print(tabla)

# Fisher Exacto (para tablas 2x2)
oddsratio, p = fisher_exact(tabla)
print("Test exacto de Fisher p =", round(p,4))
if p < 0.05:
    print(" Existe asociación significativa entre Hijos y Relación de Pareja Estable")
else:
    print(" No se encontró asociación significativa")

# Gráfico de barras agrupadas
cruce_hijos_pareja_graf = pd.crosstab(df['HIJOS'], df['RELACION_PAREJA_ESTABLE'])
cruce_hijos_pareja_graf.plot(kind="bar", figsize=(8,5))

plt.title("Relación entre Hijos y Tener Pareja Estable")
plt.xlabel("¿Tiene Hijos?")
plt.ylabel("Número de Personas")
plt.xticks(rotation=0)
plt.legend(title="Pareja Estable")
plt.show()

"""Analisis fallecimiento padres"""

# Hijos con Madre Vive
cruce_hijos_madre = pd.crosstab(df['HIJOS'], df['MADRE_VIVE'], margins=True)
print("\n=== Cruce HIJOS vs MADRE_VIVE ===")
print(cruce_hijos_madre)

# Hijos con Padre Vive
cruce_hijos_padre = pd.crosstab(df['HIJOS'], df['PADRE_VIVE'], margins=True)
print("\n=== Cruce HIJOS vs PADRE_VIVE ===")
print(cruce_hijos_padre)

import matplotlib.pyplot as plt

# Cruces
madre = pd.crosstab(df['HIJOS'], df['MADRE_VIVE'])
padre = pd.crosstab(df['HIJOS'], df['PADRE_VIVE'])

# Unimos los dataframes para graficar juntos
cruce = pd.concat({"Madre Vive": madre, "Padre Vive": padre}, axis=1)

# Gráfico de barras apiladas
cruce.plot(kind="bar", figsize=(9,6))
plt.title("Relación entre Hijos y si Madre o Padre Vive")
plt.xlabel("¿Tiene Hijos?")
plt.ylabel("Número de Personas")
plt.xticks(rotation=0)
plt.show()

"""Relacion entre categoria y maltrato intrafamiliar"""

import matplotlib.pyplot as plt
import pandas as pd

# Gráfico de barras agrupadas por CATEGORIA
cruce_graf = pd.crosstab(df['CATEGORIA'], df['MALTRATO_INTRAFAMILIAR'])
cruce_graf.plot(kind="bar", figsize=(8,5))

plt.title("Relación entre Categoría y Maltrato Intrafamiliar")
plt.xlabel("Categoría")
plt.ylabel("Número de Personas")
plt.xticks(rotation=0)
plt.legend(title="Maltrato Intrafamiliar")
plt.show()

import pandas as pd

# Tabla de contingencia
cruce_graf = pd.crosstab(df['CATEGORIA'], df['MALTRATO_INTRAFAMILIAR'])

# Calcular porcentajes por fila
cruce_pct = cruce_graf.div(cruce_graf.sum(axis=1), axis=0) * 100

# Mostrar tabla de porcentajes
print("Porcentajes por categoría:")
print(cruce_pct.round(1))  # redondea a 1 decimal